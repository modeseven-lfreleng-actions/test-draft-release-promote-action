---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# promote-draft-release-action
name: "⏫ Promote Draft Release"
description: "Promotes a draft GitHub release"
# When no inputs specified, defaults to the most recent

inputs:
  # Mandatory
  TOKEN:
    description: 'GitHub Token with write content permissions'
    required: true
    type: 'string'
  # Optional
  TAG:
    description: 'Tag of draft release to promote'
    required: false
    type: 'string'
  NAME:
    description: 'Name of draft release to promote'
    required: false
    type: 'string'
  REVERSE_SORT:
    description: 'Reverse sorting order'
    required: false
    type: 'boolean'
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: "Capture draft releases in repository"
      env:
        GITHUB_TOKEN: ${{ inputs.TOKEN }}
      shell: bash
      run: |
        # Capture draft releases in repository

        # Note: GitHub token must have permissions: "content: write
        if [ -z "$GITHUB_TOKEN" ]; then
          echo "Error: GitHub token not passed to action ❌"; exit 1
        else
          echo "Token: $GITHUB_TOKEN"
        fi

        releases=$(gh release list --json name,tagName,createdAt,isDraft)
        echo "$releases"

        # Build JQ query string based on inputs
        if [ "${{ inputs.REVERSE_SORT }}" == 'true' ]; then
          REVERSE='|reverse'
        fi

        if [ "${{ inputs.TAG }}" == 'true' ]; then
          flags="| select(.tagName==${{ inputs.TAG }})"
        fi
        if [ "${{ inputs.NAME }}" == 'true' ]; then
          flags="$flags | select(.name==${{ inputs.NAME }})"
        fi

        echo "Selection/flags: $flags"

        sorted=$(echo "$releases" |\
        jq "sort_by(.tagName)$REVERSE.[0] | select(.isDraft==true) $flags")
        echo "$sorted"

        if [ -z "$sorted" ]; then
          echo "Error: no draft releases matched provided inputs ❌"
          # exit 1 # Re-instate when finished debugging
          exit 0
        fi

        # Use of GitHub CLI requires a valid token
        echo "# Promote Draft Release ⏫" >> "$GITHUB_STEP_SUMMARY"
        echo "$sorted" >> "$GITHUB_STEP_SUMMARY"
