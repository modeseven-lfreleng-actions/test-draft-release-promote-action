---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# promote-draft-release-action
name: "⏫ Promote Draft Release"
description: "Promotes a draft GitHub release to a full release"
# When no inputs specified, defaults to most recent draft release

inputs:
  # Mandatory
  TOKEN:
    description: 'GitHub Token with write content permissions'
    required: true
    type: 'string'
  # Optional
  TAG:
    description: 'Tag of draft release to promote'
    required: false
    type: 'string'
  NAME:
    description: 'Name of draft release to promote'
    required: false
    type: 'string'
  SORT_BY:
    description: 'Sort releases by this field'
    required: false
    type: 'string'
    default: 'none'
  SORT_REVERSE:
    description: 'Reverse sorting order'
    required: false
    type: 'boolean'
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: "Capture draft releases in repository"
      env:
        GITHUB_TOKEN: ${{ inputs.TOKEN }}
      shell: bash
      # yamllint disable rule:line-length
      run: |
        # Capture draft releases in repository

        # Disable script debugging prior to release
        set -vx

        # Note: GitHub token must have permissions: "content: write"
        if [ -z "$GITHUB_TOKEN" ]; then
          echo "Error: GitHub token not passed to action ❌"; exit 1
        fi

        # Check for JQ command
        jq_cmd=$(which jq)
        if [ ! -x "$jq_cmd" ]; then
          echo "Error: jq command not found ❌"; exit 1
        fi

        # Valid sort options provided by:
        #  gh release list --json [2025-04-18]
        #   createdAt
        #   isDraft
        #   isLatest
        #   isPrerelease
        #   name
        #   publishedAt
        #   tagName

        release_data=$(gh release list --json \
          createdAt,isDraft,isLatest,isPrerelease,name,publishedAt,tagName)
        if [ -z "$release_data" ]; then
          echo "Error: GitHub CLI command returned no results ❌"; exit 1
        elif [ "$ACTIONS_STEP_DEBUG" == 'true' ]; then
          echo "Raw GitHub API query data 🐞"
          echo "$release_data"
        fi

        if [ "${{ inputs.SORT_BY }}" != "none" ]; then
          echo "Sorting by: ${{ inputs.SORT_BY }}"
          sort_flags="sort_by(.${{ inputs.SORT_BY }})"
        fi
        if [ "${{ inputs.SORT_REVERSE }}" == 'true' ]; then
          echo "Reverse sort order requested 🔄"
          sort_flags="$sort_flags|reverse"
        fi

        if [ -n "$sort_flags" ]; then
          echo "Sort flags/options: $sort_flags ⛳︎"
          draft_release=$(echo "$release_data" | $jq_cmd \".[0]$sort_flags | select\(.isDraft==true\)\")
        else
          draft_release=$(echo "$release_data" | $jq_cmd '.[0] | select(.isDraft==true)')
        fi
        echo "$draft_release"

        if [ -z "$draft_release" ]; then
          echo "Error: GitHub CLI command returned no results ❌"; exit 1
        elif [ "$ACTIONS_STEP_DEBUG" == 'true' ]; then
          echo "Sorted GitHub API query data 🐞"
          echo "$draft_release"
        fi

        tag=$(echo $draft_release | jq '.tagName' | sed 's:"::g')

        release_url=$(gh release edit "$tag" --draft=false)
        if [ $# -eq 0 ]; then
          echo "Release promoted: $release_url"
        else
          echo "Error: GitHub CLI failed to promote release ❌"; exit 1
        fi

        # Use of GitHub CLI requires a valid token
        echo "# Promoted Draft Release ⏫" >> "$GITHUB_STEP_SUMMARY"
        echo "$release_url" >> "$GITHUB_STEP_SUMMARY"
