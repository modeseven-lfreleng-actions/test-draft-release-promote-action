---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# promote-draft-release-action
name: "⏫ Promote Draft Release"
description: "Promotes a draft GitHub release to a full release"
# When no inputs specified, defaults to most recent draft release

inputs:
  # Mandatory
  TOKEN:
    description: 'GitHub Token with write content permissions'
    required: true
    type: 'string'
  # Optional
  TAG:
    description: 'Tag of draft release to promote'
    required: false
    type: 'string'
  NAME:
    description: 'Name of draft release to promote'
    required: false
    type: 'string'
  SORT_BY:
    description: 'Sort releases by this field'
    required: false
    type: 'string'
    default: 'none'
  SORT_REVERSE:
    description: 'Reverse sorting order'
    required: false
    type: 'boolean'
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: "Capture draft releases in repository"
      env:
        GITHUB_TOKEN: ${{ inputs.TOKEN }}
      shell: bash
      run: |
        # Capture draft releases in repository

        # Disable script debugging prior to release
        set -vx

        # Note: GitHub token must have permissions: "content: write"
        if [ -z "$GITHUB_TOKEN" ]; then
          echo "Error: GitHub token not passed to action ❌"; exit 1
        fi

        # Check for JQ command
        jq_cmd=$(which jq)
        if [ ! -x "$jq_cmd" ]; then
          echo "Error: jq command not found ❌"; exit 1
        fi

        # Valid sort options provided by:
        #  gh release list --json [2025-04-18]
        #   createdAt
        #   isDraft
        #   isLatest
        #   isPrerelease
        #   name
        #   publishedAt
        #   tagName

        release_data=$(gh release list --json \
          createdAt,isDraft,isLatest,isPrerelease,name,publishedAt,tagName)
        if [ "$ACTIONS_STEP_DEBUG" == 'true' ]; then
          echo "Raw GitHub API query data 🐞"
          echo "$release_data"
        fi

        if [ "${{ inputs.SORT_BY }}" == "none" ]; then
          sort_flags=""
        elif [ -n "${{ inputs.SORT_BY }}" ]; then
          echo "Sorting by: ${{ inputs.SORT_BY }}"
          sort_flags="sort_by(.${{ inputs.SORT_BY }})
        elif [ -n "${{ inputs.SORT_REVERSE }}" ]; then
          echo "Reverse sort order requested 🔄"
          sort_flags="$sort_flags|reverse"
        fi

        # Example: jq "sort_by(.tagName) | select(.isDraft==true) $flags")

        sorted=$(echo "$releases" |\
          $jq_cmd \"$sort_flags | select(.isDraft==true))\""
        echo "$sorted"

        if [ "$ACTIONS_STEP_DEBUG" == 'true' ]; then
          echo "Sorted GitHub API query data 🐞"
          echo "$sorted_data"
        fi

        if [ -n "$flags" ]; then
          echo "Selection/flags for jq: $flags 🏴‍☠️"
        fi

        draft_release=$(echo "$sorted_data" | jq '.[0]')

        if [ -z "$draft_releases" ]; then
          echo "Error: no draft releases matched provided inputs ❌"
          # exit 1 # Re-instate when finished debugging
          exit 0
        fi
        echo "Draft release:"
        echo "$draft_releases"

        # Use of GitHub CLI requires a valid token
        echo "# Promote Draft Release ⏫" >> "$GITHUB_STEP_SUMMARY"
